@inject HttpClient HttpClient
@inject IJSRuntime JS

<EditForm Model="@customerModel" OnSubmit="RegisterCustomer">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <h3>Customer</h3>
    <div>
        <label>Nombre:</label>
        <InputText id="name" class="form-control" @bind-Value="customerModel.Name" />
    </div>
    <div>
        <label>Email:</label>
        <InputText id="email" class="form-control" @bind-Value="customerModel.Email" />
    </div>
    <ValidationMessage For="@(() => customerModel.PaymentError)" />

    <h3>Payment methods</h3>
    
    <div id="payment-element"></div>

    <button type="submit" class="btn btn-primary mt-3">Save</button>
    
</EditForm>

<div id="payment-request-button"></div>

<p>@ErrorMessage</p>

@code {
    [Parameter]
    public string CustomerId { get; set; }
    private bool isPaymentInitialized = false;
    private CustomerModel customerModel = new CustomerModel();

    private bool IsProcessing = false;
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        // Llamar al backend para crear el PaymentIntent y obtener el clientSecret
        var response = await HttpClient.PostAsJsonAsync<SetupIntentResponse>("api/payments/create-setup-intent", null);
        var result = await response.Content.ReadFromJsonAsync<SetupIntentResponse>();
        Console.WriteLine(result);
        if (result != null)
        {
            // Inicializar Stripe y Payment Element
            await JS.InvokeVoidAsync("initializeStripe", result.ClientSecret);
            isPaymentInitialized = true;
        }
    }

    private async Task RegisterCustomer()
    {
        IsProcessing = true;

        // Confirmar el método de pago
        var result = await JS.InvokeAsync<string?>("confirmPM");
        if (result != null)
        {
            CustomerRequest customer = new()
                {
                    Email = customerModel.Email,
                    Name = customerModel.Name,
                    PaymentMethodId = result
                };

            var response = await HttpClient.PostAsJsonAsync<CustomerRequest>("api/payments/register-customer", customer);
        }
        else
            ErrorMessage = "Error confirming payment method";

        
        IsProcessing = false;
    }

    private class SetupIntentResponse
    {
        public string? ClientSecret { get; set; }
    }

    private class PaymentResult
    {
        public bool Success { get; set; }
        public string? PaymentMethodId { get; set; }
        public string? Error { get; set; }
    }

    public class CustomerRequest
    {
        public string Name { get; set; }
        public string Email { get; set; }
        public string PaymentMethodId { get; set; }
    }

    public class CustomerModel
    {
        public string Name { get; set; }
        public string Email { get; set; }
        public string PaymentError { get; set; }
    }
}
